# Generated by Django 4.1.7 on 2024-08-13 19:06

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('gallery', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(blank=True, max_length=32, null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('bidth', models.DateField(blank=True, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=123, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('first_name', models.CharField(blank=True, max_length=150, null=True)),
                ('last_name', models.CharField(blank=True, max_length=150, null=True)),
                ('gender', models.CharField(choices=[('F', 'Female'), ('M', 'Male'), ('A', 'All')], default='A', max_length=1)),
                ('interest_gender', models.CharField(choices=[('F', 'Female'), ('M', 'Male'), ('A', 'All')], default='A', max_length=1)),
                ('city', models.CharField(blank=True, max_length=32, null=True)),
                ('about', models.TextField(blank=True, null=True)),
                ('work', models.TextField(blank=True, null=True)),
                ('height', models.IntegerField(blank=True, null=True)),
                ('goal', models.CharField(blank=True, choices=[('L', 'Love'), ('R', 'Romantice'), ('O', 'Obzhenie')], max_length=1, null=True)),
                ('orientation', models.CharField(blank=True, choices=[('H', 'Гетеросексуал'), ('G', 'Гей / Лесбиянка'), ('B', 'Бисексуал'), ('A', 'Асексуал'), ('D', 'Демисексуал'), ('P', 'Пансексуал')], max_length=32, null=True)),
                ('relationship', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No'), ('S', 'Soso')], max_length=32, null=True)),
                ('childrens', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No')], max_length=32, null=True)),
                ('personality', models.CharField(blank=True, choices=[('E', 'Экстраверт'), ('I', 'Интроверт'), ('S', 'Что-то между')], max_length=32, null=True)),
                ('education', models.CharField(blank=True, choices=[('S', 'Среднее'), ('M', 'Магистр'), ('V', 'Высшее')], max_length=32, null=True)),
                ('alcohol', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No')], max_length=32, null=True)),
                ('smoking', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No')], max_length=32, null=True)),
                ('code', models.IntegerField(blank=True, null=True)),
                ('gallery', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gallery.gallery')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
